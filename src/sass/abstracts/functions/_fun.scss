@use 'sass:map';
@use '../variables' as *;
@use '../variables/maps' as *;

@function ff($ff) {
	@return map-get($fonts, $ff);
}

@function v($propertyName) {
	@return var(--ygg-#{$propertyName});
}

// @function s($setting) {
// 	@return unquote('{{ settings.ygg_' + $setting + ' }}!important');
// }
@function s($setting) {
	@return unquote('$ ' + $setting + '!important');
}

// :root {
//   --ygg-ndx-bgc: {{ settings.ygg_index_background_color }} !important;
//   --ygg-pg-bgc: {{ settings.ygg_pg_bgc }} !important;
//   --ygg-acc-bgc: {{ settings.ygg_acc_bgc }} !important;
//   --ygg-head-bgc: {{ settings.ygg_head_bgc }} !important;
//   --ygg-foot-bgc: {{ settings.ygg_foot_bgc }} !important;
//   --ygg-nav-bgc: {{ settings.ygg_nav_bgc }} !important;
// }

$fonts: (
	font-body: v(font-body),
	font-accent: v(font-accent),
	font-head: v(font-head),
	font-nav: v(font-nav),
);

$yggdrasil: (
	ndx-bgc: s(ndx-bgc),
	pg-bgc: s(pg_bgc),
	acc-bgc: s(acc_bgc),
	head-bgc: s(head_bgc),
	foot-bgc: s(foot_bgc),
	nav-bgc: s(nav_bgc),
);

:root {
	// SPACING Custom Properties
	@each $space, $value in $yggdrasil {
		--ygg-#{$space}: #{$value};
	}
}

@function insta($key) {
	$value: map-get($insta-filters, $key);
	@return $value;
}

@function f($key) {
	$value: map-get($filters-map, $key);
	@return $value;
}

@function hex($key, $alpha: 1) {
	$value: map-get($hexmap, $key);
	@return rgba($value, $alpha);
}

@function chex($key, $alpha: 1) {
	$value: map-get($hexmap, $key);
	@return contrast(rgba($value, $alpha));
}

// Our function for shorter usage of map-get();
// @function setcolor($mod, $tone) {
// 	$modword: map.get($mods, $mod);
// 	$colortone: map.get($tones, $tone);
// 	@return randomColor($modword, $color);
// }
// @function rndm($mod, $color) {
// 	$color: map-get($colorNames, $key);
// 	$mod: map-get($aimlessColor, $key);
// 	@return randomColor($mod, $color);
// }
